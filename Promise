A Promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. Promises help manage asynchronous code, making it easier to handle tasks like fetching data from an API, reading files, or performing timeouts without nesting callback functions (commonly called "callback hell").


---

States of a Promise

1. Pending: The initial state. The promise has neither been fulfilled nor rejected.


2. Fulfilled: The operation completed successfully, and the then method is called.


3. Rejected: The operation failed, and the catch method is called.




---

How to Create a Promise

A Promise is created using the Promise constructor, which takes a function (executor) with two arguments: resolve and reject.

const myPromise = new Promise((resolve, reject) => {
    const success = true; // Simulate success or failure

    if (success) {
        resolve("Operation succeeded!"); // Fulfill the promise
    } else {
        reject("Operation failed!"); // Reject the promise
    }
});


---

Handling Promises

We handle promises using then, catch, and finally:

then(): Handles the resolved (fulfilled) case.

catch(): Handles the rejected case.

finally(): Executes after then or catch, regardless of the outcome.


Example: Basic Promise Usage

const myPromise = new Promise((resolve, reject) => {
    const success = true;

    setTimeout(() => {
        if (success) {
            resolve("Data fetched successfully!");
        } else {
            reject("Error fetching data!");
        }
    }, 2000); // Simulate asynchronous operation
});

myPromise
    .then((message) => {
        console.log(message); // Output: Data fetched successfully!
    })
    .catch((error) => {
        console.error(error); // If rejected: Output: Error fetching data!
    })
    .finally(() => {
        console.log("Operation completed."); // Always runs
    });


---

Real-Life Example: Fetching Data with Promises

Using fetch API to demonstrate promises:

fetch("https://jsonplaceholder.typicode.com/posts/1") // API call returns a promise
    .then((response) => {
        if (!response.ok) {
            throw new Error("Network response was not ok");
        }
        return response.json(); // Parse JSON from the response
    })
    .then((data) => {
        console.log("Post Title:", data.title);
    })
    .catch((error) => {
        console.error("Fetch error:", error);
    })
    .finally(() => {
        console.log("Fetch operation finished.");
    });


---

Promise Chaining

Promises can be chained together for sequential asynchronous operations.

const getNumber = () => {
    return new Promise((resolve) => {
        setTimeout(() => resolve(5), 1000);
    });
};

getNumber()
    .then((num) => {
        console.log("First number:", num); // Output: 5
        return num * 2;
    })
    .then((num) => {
        console.log("Doubled number:", num); // Output: 10
        return num + 3;
    })
    .then((num) => {
        console.log("Final number:", num); // Output: 13
    });


---

Error Handling in Promises

Errors can be caught using catch. Any error in the chain stops further execution and goes to the nearest catch.

const faultyPromise = new Promise((resolve, reject) => {
    throw new Error("Something went wrong!");
});

faultyPromise
    .then((data) => console.log(data)) // Skipped
    .catch((error) => console.error("Error:", error.message)) // Output: Error: Something went wrong!
    .finally(() => console.log("Always executed."));


---

Combining Promises

Promise.all

Executes multiple promises in parallel and waits for all of them to resolve. If any promise is rejected, it immediately fails.

const promise1 = Promise.resolve(10);
const promise2 = Promise.resolve(20);
const promise3 = Promise.resolve(30);

Promise.all([promise1, promise2, promise3])
    .then((results) => {
        console.log("Results:", results); // Output: [10, 20, 30]
    })
    .catch((error) => console.error("Error:", error));

Promise.race

Resolves or rejects as soon as the first promise settles.

const promiseA = new Promise((resolve) => setTimeout(() => resolve("A"), 2000));
const promiseB = new Promise((resolve) => setTimeout(() => resolve("B"), 1000));

Promise.race([promiseA, promiseB])
    .then((result) => {
        console.log("Fastest result:", result); // Output: B
    });


---

Promise vs. Callback

Promises improve readability by avoiding nested callbacks (callback hell).

They provide better error handling through catch.


Callback Hell Example:

setTimeout(() => {
    console.log("Step 1");
    setTimeout(() => {
        console.log("Step 2");
        setTimeout(() => {
            console.log("Step 3");
        }, 1000);
    }, 1000);
}, 1000);

Refactored Using Promises:

const delay = (ms, message) => {
    return new Promise((resolve) => setTimeout(() => resolve(message), ms));
};

delay(1000, "Step 1")
    .then((msg) => {
        console.log(msg);
        return delay(1000, "Step 2");
    })
    .then((msg) => {
        console.log(msg);
        return delay(1000, "Step 3");
    })
    .then(console.log);


---

Summary

Promises are used to manage asynchronous operations effectively.

Use then for success, catch for errors, and finally for cleanup.

Promises prevent callback hell and allow chaining for sequential tasks.


Let me know if you need further clarification or additional examples!

